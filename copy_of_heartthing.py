# -*- coding: utf-8 -*-
"""Copy of Heartthing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QDuoIMUi4Haujdx174jwWObAEQ5ajzCn
"""

import pandas as pd
import numpy as np

data = pd.read_csv('/content/heart.csv')

df = pd.DataFrame(data, columns=['Age','Sex','ChestPain','RestingBP','Cholesterol', 'Fasting BS', 'RestingECG', 'MaxHR', 'ExerciseAngina', 'Oldpeak', 'ST_Slope', "HeartDisease"])
print(df)

import matplotlib.pyplot as plt

print(df['RestingBP'].describe())
plt.figure(figsize=(5,4))
plt.scatter(df['RestingBP'],df['Age'], color='plum')
plt.xlabel("RestingBP")
plt.ylabel("Age")

dic = df[['HeartDisease', 'Sex']].groupby('Sex').mean()
dic.plot(kind = 'bar', color = 'crimson')
plt.show()

dic = df[['ST_Slope', 'HeartDisease']].groupby('ST_Slope').mean().sort_values(by = 'HeartDisease')
dic.plot(kind = 'bar', color = 'blue')
plt.show()

dic = df[['RestingECG', 'HeartDisease']].groupby('RestingECG').mean().sort_values(by = 'HeartDisease')
dic.plot(kind = 'bar', color = 'black')
plt.show()

import seaborn as sns

corr_matrix = df.corr()
def absolute(x):
    return np.abs(x)
plt.figure(figsize = (10, 6))
sns.heatmap(corr_matrix, annot = True, cmap = 'Blues')
plt.show()

sns.displot(df['Age'])

sns.distplot(df['RestingBP'],kde=True,hist=True,rug=True,bins=20,color='Skyblue')

sns.distplot(df['Age'],kde=True,hist=True,rug=True,bins=20)

sns.distplot(df['Cholesterol'],kde=True,hist=True,rug=True,bins=20,color='Green')

df.groupby('RestingECG').size().plot(kind='pie',autopct='%.2f',title='Distribution Based On Resting ECG')

df.groupby('ExerciseAngina').size().plot(kind='pie',autopct='%.2f',title='Distribution Based On Excercise Agina')

dic = df[['ExerciseAngina', 'HeartDisease']].groupby('ExerciseAngina').mean().sort_values(by = 'HeartDisease')
dic.plot(kind = 'bar', color = 'green')
plt.show()

sns.countplot(df, x="HeartDisease")
print(df["HeartDisease"].value_counts()/len(df)*100)

df.groupby('HeartDisease').size().plot(kind='pie',autopct='%.2f',title='Distribution Based On Heart Disease')

cols=["Age","RestingBP","Cholesterol","MaxHR","Oldpeak"]
corr=df[cols].corr()
sns.heatmap(corr,annot=True)
plt.show()

sns.set(style="whitegrid")

plt.figure(figsize=(7, 4))

sns.histplot(data=df[df['HeartDisease'] == 0], x='Age', kde=True, color='blue', label='No Heart Disease')

sns.histplot(data=df[df['HeartDisease'] == 1], x='Age', kde=True, color='red', label='Heart Disease')

plt.title('Distribution of Age by Heart Disease')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.legend()
plt.show()

#1st Algorithm using Random Forest Classifier

from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import plot_tree

rf_classifier = RandomForestClassifier(n_estimators=5, random_state=10)

X = df[['Age']]
y = df['HeartDisease']

rf_classifier.fit(X, y)

plt.figure(figsize=(20,25))
plot_tree(rf_classifier.estimators_[0], feature_names=['Age'], filled=True)
plt.show()

#2nd Algorithm using Train and Test Split and Printing the Accuracy Score

from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

rawdataframe = pd.read_csv('/content/heartguy.csv')

print("Initial date:")
print(rawdataframe.head())

rawdataframe = pd.get_dummies(rawdataframe, columns=['Sex'])

rawdataframe = pd.get_dummies(rawdataframe, columns=['ChestPainType'])

rawdataframe = pd.get_dummies(rawdataframe, columns=['ExerciseAngina'])

rawdataframe = pd.get_dummies(rawdataframe, columns=['RestingECG'])

rawdataframe = pd.get_dummies(rawdataframe, columns=['ST_Slope'])

rawdataframe

#Fasting blood sugar level (1 for true, 0 for false)

X = rawdataframe.drop('FastingBS', axis=1)
y = rawdataframe['FastingBS']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=121)

svm_classifier = SVC()

svm_classifier.fit(X_train, y_train)

y_pred = svm_classifier.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy: ", accuracy)

#Slope of the ST segment on the ECG during exercise (e.g., Up, Flat)

X = rawdataframe.drop('ST_Slope_Down', axis=1)
y = rawdataframe['ST_Slope_Down']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.7, random_state=121)

svm_classifier = SVC()

svm_classifier.fit(X_train, y_train)

y_pred = svm_classifier.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy: ", accuracy)

#Presence or absence of heart disease (2 for presence, 1 for absence)

X = rawdataframe.drop('HeartDisease', axis=1)
y = rawdataframe['HeartDisease']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.9, random_state=121)

svm_classifier = SVC()

svm_classifier.fit(X_train, y_train)

y_pred = svm_classifier.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy: ", accuracy)

#Use Decision Tree Classifier and predict the new input

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn import metrics

df1 = pd.read_csv('/content/heart.csv')

print(df1)

x = df1[['Age']]
y = df1['ChestPainType']

dt_classifier = DecisionTreeClassifier()

dt_classifier.fit(x, y)

new_data = {
    'Age': [10]
}

new_df = pd.DataFrame(new_data)

prediction = dt_classifier.predict(new_df)

print("Prediction: ", prediction)

#################

x = df1[['Age']]
y = df1['ExerciseAngina']

dt_classifier = DecisionTreeClassifier()

dt_classifier.fit(x, y)

new_data = {
    'Age': [70]
}

new_df = pd.DataFrame(new_data)

prediction = dt_classifier.predict(new_df)

print("Prediction: ", prediction)

#Make the predicted vs actual graph

from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(df[['Age']], df['RestingBP'])

episodes_range = np.linspace(df['Age'].min(), df['Age'].max(),50).reshape(-1, 1)
predicted_popularity = model.predict(episodes_range)

plt.scatter(df['Age'], df['RestingBP'], label='Actual')
plt.plot(episodes_range, predicted_popularity, color='red', label='Predicted')
plt.xlabel('Age')
plt.ylabel('RestingBP')
plt.title('Age vs RestingBP')
plt.legend()
plt.show()

df.head()